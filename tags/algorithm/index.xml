<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on Heaciy&#39;s Blog</title>
    <link>https://heaciy.com/tags/algorithm/</link>
    <description>Recent content in algorithm on Heaciy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://heaciy.com/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>常用内部排序算法</title>
      <link>https://heaciy.com/p/internal-sort/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://heaciy.com/p/internal-sort/</guid>
      <description>本文基于王道的数据结构考研复习指导，仅作为本人的学习笔记，如有误欢迎指正
 插入排序 直接插入排序 整个例表[0...i-1, i, i+1...n]，i前面的部分维持有序，从i开始向后遍历无序的部分，不断往前面有序的部分插入，插入流程是
 i与i-1（i前面的元素，即有序列表中最后一个，即最大值）比较 如果i大于i-1则说明i比0~i-1都大，故将i插入到有序部分的最后（即保持当前位置不变） 如果i比i-1小，则从i-1开始向前寻找合适的位置，一边比较，一边挪动，直到找到合适的位置，再将i对应的值放到该位置  不断地把i位置的元素插入到i前面的有序部分中，直到最后一个插入完成即有序
def insert_sort(A: List[int]): &amp;#34;&amp;#34;&amp;#34; 插入排序 稳定 O(n^2) &amp;#34;&amp;#34;&amp;#34; tmp = 0 for i in range(1, len(A)): # i从第二个位置开始 if A[i] &amp;lt; A[i-1]: # 与有序部分最大值比较判断是否需要挪动 tmp = A[i] # 暂存当前值 j = i-1 while(A[j] &amp;gt; tmp and j &amp;gt;= 0): # 向后挪动，将插入位置挪出来 A[j+1] = A[j] j -= 1 A[j+1] = tmp # 将当前值放入插入位置 空间效率：仅使用了常数个辅助单元，因此空间复杂度为O(1)
时间效率：在排序时向有序子表中插入当前元素共进行了n-1趟，每趟操作都在进行比较和移动，而比较次数和移动次数取决于待排表的初始状态
 最好情况：初始表基本有序，每趟都只需要比较一次而不用移动元素，时间复杂度为O(n) 最坏的情况：初始表逆序，总比较次数$\sum_{i=2}^n{i}$，总移动次数$\sum_{i=2}^n{i+1}$ 平均情况：初始表状态随机，取最坏和最好的平均值，总比较和总移动次数均约为O($\frac{n_2}{4}$)  稳定性：由于每次插入前总是先比较再移动，所以不会出现相同元素位置发生变化的情况，故直接插入排序是一种稳定的排序方法</description>
    </item>
    
  </channel>
</rss>
