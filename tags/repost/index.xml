<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>repost on Heaciy&#39;s Blog</title>
    <link>https://heaciy.com/tags/repost/</link>
    <description>Recent content in repost on Heaciy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://heaciy.com/tags/repost/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Top 6 Django Decorators</title>
      <link>https://heaciy.com/p/top-6-django-decorators/</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://heaciy.com/p/top-6-django-decorators/</guid>
      <description>作者👨‍💻：Pablo Iglesias 时间🕐：2018/06/27 原文链接🌐：https://www.bedjango.com/blog/top-6-django-decorators/ 声明👉：本文为转载，仅作为个人学习记录
 What is a Decorator? A decorator is the name of one of the most popular design patterns used nowadays, many times we use it without knowing that we are using a design pattern. And what&amp;rsquo;s so special about this pattern? As we can read at Python Wiki using It is a way of apparently modifying an object&amp;rsquo;s behavior, by enclosing it inside a decorating object with a similar interface.</description>
    </item>
    
  </channel>
</rss>
